ToDoOS
=======================================================================
import { DragDropContext, Droppable, Draggable, type DropResult } from "@hello-pangea/dnd";
import { useEffect, useState } from "react";
import CardModal from "./CardModal";
import type { Card, Column } from "./Types";
import AddTaskModal from "./AddTaskModal";

const App: React.FC = () => {
  const [columns, setColumns] = useState<Column[]>(() => {
    const saved = localStorage.getItem("boardData");
    return saved
      ? JSON.parse(saved)
      : [
          { id: "todo", title: "To Do", cards: [] },
          { id: "in-progress", title: "In Progress", cards: [] },
          { id: "done", title: "Done", cards: [] },
        ];
  });

  const [selectedCard, setSelectedCard] = useState<Card | null>(null);
  const [isAddModalOpen, setIsAddModalOpen] = useState<string | null>(null);

  // === Auto-save ===
  useEffect(() => {
    localStorage.setItem("boardData", JSON.stringify(columns));
  }, [columns]);

  // === Open/Close ===
  const openCard = (card: Card) => setSelectedCard(card);
  const closeCard = () => setSelectedCard(null);

  // === Update Card (with auto-move) ===
  const updateCard = (updated: Card) => {
    setColumns((prev) => {
      let newCols = prev.map((col) => ({
        ...col,
        cards: col.cards.map((c) => (c.id === updated.id ? updated : c)),
      }));

      // === Auto-move logic ===
      const col = prev.find((c) => c.cards.some((t) => t.id === updated.id));
      if (col) {
        if (updated.subtasks.length > 0) {
          const completed = updated.subtasks.filter((s) => s.done).length;
          const allDone = completed === updated.subtasks.length;

          if (allDone && col.id !== "done") {
            // move to Done
            newCols = newCols.map((c) =>
              c.id === col.id
                ? { ...c, cards: c.cards.filter((t) => t.id !== updated.id) }
                : c.id === "done"
                ? { ...c, cards: [...c.cards, updated] }
                : c
            );
          } else if (!allDone && col.id === "todo") {
            // move from ToDo ‚Üí In Progress if has subtasks
            newCols = newCols.map((c) =>
              c.id === "todo"
                ? { ...c, cards: c.cards.filter((t) => t.id !== updated.id) }
                : c.id === "in-progress"
                ? { ...c, cards: [...c.cards, updated] }
                : c
            );
          }
        }
      }

      return newCols;
    });

    if (selectedCard?.id === updated.id) {
      setSelectedCard(updated);
    }
  };

  // === Delete Card ===
  const deleteCard = (cardId: string) => {
    setColumns((prev) =>
      prev.map((col) => ({ ...col, cards: col.cards.filter((c) => c.id !== cardId) }))
    );
    setSelectedCard(null);
  };

  // === Add Card ===
  const addCard = (columnId: string, card: Card) => {
    setColumns((prev) =>
      prev.map((col) =>
        col.id === columnId ? { ...col, cards: [...col.cards, card] } : col
      )
    );
  };

  // === Drag & Drop ===
  const onDragEnd = (result: DropResult) => {
    const { source, destination } = result;
    if (!destination) return;

    const sourceColIndex = columns.findIndex((c) => c.id === source.droppableId);
    const destColIndex = columns.findIndex((c) => c.id === destination.droppableId);

    if (sourceColIndex === -1 || destColIndex === -1) return;

    const sourceCol = columns[sourceColIndex];
    const destCol = columns[destColIndex];

    const [moved] = sourceCol.cards.splice(source.index, 1);
    destCol.cards.splice(destination.index, 0, moved);

    const newCols = [...columns];
    newCols[sourceColIndex] = { ...sourceCol };
    newCols[destColIndex] = { ...destCol };
    setColumns(newCols);
  };

  return (
    <div className="min-h-screen bg-gray-100 p-6">
      <h1 className="text-2xl font-bold mb-6">Tasks Manager üìù</h1>

      <DragDropContext onDragEnd={onDragEnd}>
        <div className="flex gap-6 items-start overflow-x-auto">
          {columns.map((col) => (
            <Droppable droppableId={col.id} key={col.id}>
              {(provided) => (
                <div
                  {...provided.droppableProps}
                  ref={provided.innerRef}
                  className="bg-white rounded-md shadow p-4 w-80 flex-shrink-0"
                >
                  <h2 className="font-semibold mb-4">{col.title}</h2>

                  {col.cards.map((card, index) => {
                    const completed = card.subtasks.filter((s) => s.done).length;
                    const total = card.subtasks.length;
                    const progress = total === 0 ? 0 : Math.round((completed / total) * 100);

                    return (
                      <Draggable key={card.id} draggableId={card.id} index={index}>
                        {(provided) => (
                          <div
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                            onClick={() => openCard(card)}
                            className="bg-gray-50 p-3 mb-3 rounded shadow cursor-pointer hover:bg-gray-100"
                          >
                            <div>
                              {/* Title */}
                              <div className="font-medium">{card.title}</div>

                              {/* Due Date */}
                              {card.dueDate && (
                                <div className="text-xs text-gray-500 mt-1">
                                  üìÖ {card.dueDate}
                                </div>
                              )}

                              {/* Priority */}
                              {card.priority && (
                                <div className="text-xs mt-1">
                                  <span
                                    className={`px-2 py-0.5 rounded text-white ${
                                      card.priority === "High"
                                        ? "bg-red-500"
                                        : card.priority === "Medium"
                                        ? "bg-yellow-500"
                                        : "bg-green-500"
                                    }`}
                                  >
                                    {card.priority}
                                  </span>
                                </div>
                              )}

                              {/* Attachments count */}
                              {card.attachments.length > 0 && (
                                <div className="text-xs text-gray-500 mt-1">
                                  üìé {card.attachments.length} attachment
                                  {card.attachments.length > 1 ? "s" : ""}
                                </div>
                              )}

                              {/* Members */}
                              {card.members.length > 0 && (
                                <div className="flex mt-2">
                                  {card.members.map((m) => (
                                    <span
                                      key={m.id}
                                      title={m.name}
                                      className="mr-1 text-lg"
                                    >
                                      {m.avatar || "üë§"}
                                    </span>
                                  ))}
                                </div>
                              )}

                              {/* Labels */}
                              <div className="flex gap-1 mt-2 flex-wrap">
                                {card.labels.map((lbl) => (
                                  <span
                                    key={lbl.id}
                                    className="px-2 py-0.5 rounded text-xs text-white"
                                    style={{ backgroundColor: lbl.color }}
                                  >
                                    {lbl.name}
                                  </span>
                                ))}
                              </div>

                              {/* Progress Bar (if subtasks exist) */}
                              {total > 0 && (
                                <div className="mt-2">
                                  <div className="w-full bg-gray-200 rounded h-2">
                                    <div
                                      className="bg-green-500 h-2 rounded"
                                      style={{ width: `${progress}%` }}
                                    />
                                  </div>
                                  <p className="text-xs text-gray-500 mt-1">
                                    {completed}/{total} ({progress}%)
                                  </p>
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                      </Draggable>
                    );
                  })}
                  {provided.placeholder}

                  <button
                    className="mt-3 w-full bg-blue-600 text-white py-1.5 rounded hover:bg-blue-700"
                    onClick={() => setIsAddModalOpen(col.id)}
                  >
                    + Add Task
                  </button>
                </div>
              )}
            </Droppable>
          ))}
        </div>
      </DragDropContext>

      {selectedCard && (
        <CardModal
          card={selectedCard}
          onClose={closeCard}
          onUpdate={updateCard}
          onDelete={deleteCard}
        />
      )}

      {isAddModalOpen && (
        <AddTaskModal
          isOpen={!!isAddModalOpen}
          onClose={() => setIsAddModalOpen(null)}
          onAdd={(card) => {
            addCard(isAddModalOpen, card);
            setIsAddModalOpen(null);
          }}
        />
      )}
    </div>
  );
};

export default App;
========================================================================
import React, { useEffect, useState } from "react";
import type {
  Card,
  Subtask,
  Activity,
  Label,
  Attachment,
  Comment,
  Member,
  Priority,
} from "./Types";
import { LABEL_PRESETS, MEMBER_PRESETS, PRIORITY_PRESETS } from "./Types";

type Props = {
  card: Card;
  onUpdate: (updated: Card) => void;
  onDelete: (cardId: string) => void;
  onClose: () => void;
};

const CardModal: React.FC<Props> = ({ card, onUpdate, onDelete, onClose }) => {
  const [title, setTitle] = useState(card.title);
  const [description, setDescription] = useState(card.description);
  const [subtasks, setSubtasks] = useState<Subtask[]>(card.subtasks || []);
  const [labels, setLabels] = useState<Label[]>(card.labels || []);
  const [dueDate, setDueDate] = useState<string>(card.dueDate || "");
  const [attachments, setAttachments] = useState<Attachment[]>(card.attachments || []);
  const [comments, setComments] = useState<Comment[]>(card.comments || []);
  const [activity, setActivity] = useState<Activity[]>(card.activity || []);
  const [members, setMembers] = useState<Member[]>(card.members || []);
  const [priority, setPriority] = useState<Priority>(card.priority || "Medium");

  const [commentInput, setCommentInput] = useState("");
  const [linkInput, setLinkInput] = useState("");

  // --- Activity logger ---
  const logActivity = (type: Activity["type"], message: string) => {
    const entry: Activity = {
      id: Date.now().toString(),
      type,
      message,
      at: Date.now(),
    };
    setActivity((prev) => [...prev, entry]);
  };

  // --- Auto-save to parent ---
  useEffect(() => {
    onUpdate({
      ...card,
      title,
      description,
      subtasks,
      labels,
      dueDate,
      attachments,
      comments,
      members,
      activity,
      priority,
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [title, description, subtasks, labels, dueDate, attachments, comments, members, activity, priority]);

  // ---------- Title / Description ----------
  const handleTitleBlur = () => {
    if (title !== card.title) logActivity("updated", `Changed title to "${title}"`);
  };

  const handleDescriptionBlur = () => {
    if (description !== card.description) logActivity("updated", `Updated description`);
  };

  // ---------- Due Date ----------
  const handleDueDateChange = (newDate: string) => {
    setDueDate(newDate);
    logActivity("dueDate", `Set due date to ${newDate}`);
  };

  // ---------- Subtasks ----------
  const addSubtask = () => {
    const newSub: Subtask = { id: Date.now().toString(), title: "New subtask", done: false };
    setSubtasks((prev) => [...prev, newSub]);
    logActivity("subtask", `Added subtask "${newSub.title}"`);
  };

  const toggleSubtask = (id: string) => {
    setSubtasks((prev) => {
      const next = prev.map((s) => (s.id === id ? { ...s, done: !s.done } : s));
      const st = next.find((s) => s.id === id);
      if (st) logActivity("subtask", `Toggled subtask "${st.title}"`);
      return next;
    });
  };

  const changeSubtaskTitle = (id: string, newTitle: string) => {
    setSubtasks((prev) => prev.map((s) => (s.id === id ? { ...s, title: newTitle } : s)));
  };

  const deleteSubtask = (id: string) => {
    const st = subtasks.find((s) => s.id === id);
    setSubtasks((prev) => prev.filter((s) => s.id !== id));
    if (st) logActivity("subtask", `Deleted subtask "${st.title}"`);
  };

  // ---------- Labels ----------
  const toggleLabel = (label: Label) => {
    const exists = labels.some((l) => l.id === label.id);
    if (exists) {
      setLabels((prev) => prev.filter((l) => l.id !== label.id));
      logActivity("label", `Removed label "${label.name}"`);
    } else {
      setLabels((prev) => [...prev, label]);
      logActivity("label", `Added label "${label.name}"`);
    }
  };

  // ---------- Members ----------
  const toggleMember = (member: Member) => {
    const exists = members.some((m) => m.id === member.id);
    if (exists) {
      setMembers((prev) => prev.filter((m) => m.id !== member.id));
      logActivity("member", `Removed member "${member.name}"`);
    } else {
      setMembers((prev) => [...prev, member]);
      logActivity("member", `Added member "${member.name}"`);
    }
  };

  // ---------- Priority ----------
  const handlePriorityChange = (p: Priority) => {
    setPriority(p);
    logActivity("priority", `Set priority to "${p}"`);
  };

  // ---------- Attachments ----------
  const handleFileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files) return;
    const file = e.target.files[0];
    if (!file) return;

    const newAttachment: Attachment = {
      id: Date.now().toString(),
      name: file.name,
      url: URL.createObjectURL(file),
    };

    setAttachments((prev) => [...prev, newAttachment]);
    logActivity("attachment", `Added attachment "${file.name}"`);
  };

  const handleAddLink = () => {
    if (!linkInput.trim()) return;

    const newAttachment: Attachment = {
      id: Date.now().toString(),
      name: linkInput,
      url: linkInput,
    };

    setAttachments((prev) => [...prev, newAttachment]);
    logActivity("attachment", `Added link "${linkInput}"`);
    setLinkInput("");
  };

  const deleteAttachment = (id: string) => {
    const att = attachments.find((a) => a.id === id);
    setAttachments((prev) => prev.filter((a) => a.id !== id));
    if (att) logActivity("attachment", `Deleted attachment "${att.name}"`);
  };

  // ---------- Comments ----------
  const handleAddComment = () => {
    if (!commentInput.trim()) return;
    const newComment: Comment = {
      id: Date.now().toString(),
      text: commentInput.trim(),
      at: Date.now(),
    };
    setComments((prev) => [...prev, newComment]);
    logActivity("comment", `Added comment: "${commentInput.trim()}"`);
    setCommentInput("");
  };

  // ---------- Progress ----------
  const completed = subtasks.filter((s) => s.done).length;
  const total = subtasks.length;
  const progress = total === 0 ? 0 : Math.round((completed / total) * 100);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white p-6 rounded-md w-[900px] h-[90vh] shadow-lg relative flex gap-6">
        {/* Close Button */}
        <button
          onClick={onClose}
          className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-lg"
        >
          ‚úï
        </button>

        {/* Left column */}
        <div className="flex-1 flex flex-col overflow-y-auto pr-2">
          {/* Title */}
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            onBlur={handleTitleBlur}
            className="w-full border p-3 mb-3 rounded font-semibold text-lg"
          />

          {/* Description */}
          <textarea
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            onBlur={handleDescriptionBlur}
            placeholder="Add description..."
            className="w-full border p-3 mb-4 rounded min-h-[80px]"
          />

          {/* Due Date */}
          <h3 className="font-semibold mb-2">Due Date</h3>
          <input
            type="date"
            value={dueDate}
            onChange={(e) => handleDueDateChange(e.target.value)}
            className="border p-2 rounded w-full mb-4"
          />

          {/* Attachments */}
          <h3 className="font-semibold">Attachments</h3>
          <input type="file" onChange={handleFileUpload} className="mb-2" />
          <div className="flex gap-2 mb-2">
            <input
              type="url"
              placeholder="Paste a link..."
              value={linkInput}
              onChange={(e) => setLinkInput(e.target.value)}
              className="border p-2 rounded flex-1"
            />
            <button
              onClick={handleAddLink}
              className="bg-blue-500 text-white px-3 rounded hover:bg-blue-600"
            >
              Add
            </button>
          </div>
          <ul className="mb-3">
            {attachments.map((att) => (
              <li key={att.id} className="flex justify-between items-center text-sm border-b py-1">
                <a href={att.url} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline break-all">
                  üìé {att.name}
                </a>
                <button
                  onClick={() => deleteAttachment(att.id)}
                  className="text-red-500 hover:underline text-xs"
                >
                  Delete
                </button>
              </li>
            ))}
          </ul>

          {/* Comments */}
          <h3 className="font-semibold mt-2">Comments</h3>
          <div className="flex gap-2 mb-2">
            <input
              type="text"
              placeholder="Write a comment..."
              value={commentInput}
              onChange={(e) => setCommentInput(e.target.value)}
              className="border p-2 rounded flex-1"
            />
            <button
              onClick={handleAddComment}
              className="bg-green-500 text-white px-3 rounded hover:bg-green-600"
            >
              Add
            </button>
          </div>
          <ul className="mb-3 max-h-32 overflow-y-auto border p-2 rounded text-sm">
            {comments.map((c) => (
              <li key={c.id} className="mb-1">
                <span className="text-gray-700">{c.text}</span>{" "}
                <span className="text-xs text-gray-400">
                  ({new Date(c.at).toLocaleString()})
                </span>
              </li>
            ))}
          </ul>

          {/* Activity Log */}
          <h3 className="font-semibold mt-2">Activity Log</h3>
          {activity.length === 0 ? (
            <p className="text-sm text-gray-400">No activity yet.</p>
          ) : (
            <ul className="mt-2 text-sm max-h-40 overflow-y-auto border-t pt-2">
              {activity.map((a) => (
                <li key={a.id} className="mb-1 text-gray-600">
                  [{new Date(a.at).toLocaleString()}] {a.message}
                </li>
              ))}
            </ul>
          )}
        </div>

        {/* Right column */}
        <div className="w-[300px] flex flex-col">
          {/* Subtasks */}
          <h3 className="font-semibold mb-2">Subtasks</h3>
          <div className="max-h-48 overflow-y-auto border p-2 rounded mb-2">
            {subtasks.length === 0 && <p className="text-sm text-gray-400 mb-2">No subtasks yet</p>}
            {subtasks.map((st) => (
              <div key={st.id} className="flex items-center gap-2 mb-2">
                <input type="checkbox" checked={st.done} onChange={() => toggleSubtask(st.id)} />
                <input
                  type="text"
                  value={st.title}
                  onChange={(e) => changeSubtaskTitle(st.id, e.target.value)}
                  className={`flex-1 border-b focus:outline-none px-2 py-1 ${
                    st.done ? "line-through text-gray-400" : ""
                  }`}
                />
                <button onClick={() => deleteSubtask(st.id)} className="text-red-500 px-2">
                  ‚úï
                </button>
              </div>
            ))}
          </div>
          <button onClick={addSubtask} className="text-purple-600 text-sm mb-3 hover:underline">
            + Add Subtask
          </button>

          {/* Progress */}
          <h3 className="font-semibold mt-3">Progress</h3>
          <div className="w-full bg-gray-200 rounded h-2 mb-1">
            <div className="bg-green-500 h-2 rounded" style={{ width: `${progress}%` }} />
          </div>
          <p className="text-sm text-gray-600 mb-3">
            {completed}/{total} ({progress}%)
          </p>

          {/* Labels */}
          <h3 className="font-semibold">Labels</h3>
          <div className="flex gap-2 flex-wrap mb-3">
            {LABEL_PRESETS.map((lbl) => {
              const active = labels.some((l) => l.id === lbl.id);
              return (
                <button
                  key={lbl.id}
                  onClick={() => toggleLabel(lbl)}
                  className="px-3 py-1 rounded text-sm border"
                  style={{
                    backgroundColor: active ? lbl.color : "#fff",
                    color: active ? "#fff" : lbl.color,
                    borderColor: lbl.color,
                  }}
                >
                  {active ? "‚úì " : "+ "} {lbl.name}
                </button>
              );
            })}
          </div>

          {/* Members */}
          <h3 className="font-semibold">Members</h3>
          <div className="flex gap-2 flex-wrap mb-3">
            {MEMBER_PRESETS.map((m) => {
              const active = members.some((mm) => mm.id === m.id);
              return (
                <button
                  key={m.id}
                  onClick={() => toggleMember(m)}
                  className="px-3 py-1 rounded text-sm border"
                  style={{
                    backgroundColor: active ? "#3b82f6" : "#fff",
                    color: active ? "#fff" : "#3b82f6",
                    borderColor: "#3b82f6",
                  }}
                >
                  {m.avatar} {m.name}
                </button>
              );
            })}
          </div>

          {/* Priority */}
          <h3 className="font-semibold">Priority</h3>
          <div className="flex gap-2 mb-3">
            {PRIORITY_PRESETS.map((p) => (
              <button
                key={p}
                onClick={() => handlePriorityChange(p)}
                className={`px-3 py-1 rounded text-sm border ${
                  priority === p ? "bg-red-500 text-white" : "bg-white text-gray-700"
                }`}
              >
                {p}
              </button>
            ))}
          </div>

          {/* Buttons */}
          <div className="flex justify-between mt-auto pt-4">
            <button
              onClick={() => onDelete(card.id)}
              className="bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600"
            >
              Delete
            </button>
            <button
              onClick={onClose}
              className="bg-gray-300 text-gray-800 px-4 py-2 rounded hover:bg-gray-400"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CardModal;
===================================================================================================
import React, { useState } from "react";
import type { Card, Member, Label } from "./Types";
import { LABEL_PRESETS } from "./Types";

// ÿ£ÿπÿ∂ÿßÿ° ÿßŸÅÿ™ÿ±ÿßÿ∂ŸäŸäŸÜ (ŸÖŸÖŸÉŸÜ ÿ™ÿ±ÿ®ÿ∑ŸáŸÖ ŸÑÿßÿ≠ŸÇÿßŸã ÿ®ŸÇÿßÿπÿØÿ© ÿ®ŸäÿßŸÜÿßÿ™ ÿ£Ÿà API)
const MEMBERS: Member[] = [
  { id: "m1", name: "Alice", avatar: "üë©" },
  { id: "m2", name: "Bob", avatar: "üë®" },
  { id: "m3", name: "Charlie", avatar: "üßë" },
];

type Props = {
  isOpen: boolean;
  onClose: () => void;
  onAdd: (card: Card) => void;
};

export default function AddTaskModal({ isOpen, onClose, onAdd }: Props) {
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [priority, setPriority] = useState<"High" | "Medium" | "Low" | undefined>();
  const [selectedMembers, setSelectedMembers] = useState<Member[]>([]);
  const [selectedLabels, setSelectedLabels] = useState<Label[]>([]);

  if (!isOpen) return null;

  const toggleMember = (member: Member) => {
    setSelectedMembers((prev) =>
      prev.some((m) => m.id === member.id)
        ? prev.filter((m) => m.id !== member.id)
        : [...prev, member]
    );
  };

  const toggleLabel = (label: Label) => {
    setSelectedLabels((prev) =>
      prev.some((l) => l.id === label.id)
        ? prev.filter((l) => l.id !== label.id)
        : [...prev, label]
    );
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!title.trim()) return;

    const newCard: Card = {
      id: Date.now().toString(),
      title: title.trim(),
      description: description.trim(),
      subtasks: [],
      priority,
      labels: selectedLabels,
      members: selectedMembers,
      attachments: [],
      comments: [],
      activity: [
        {
          id: Date.now().toString(),
          type: "created",
          message: `Task "${title.trim()}" created`,
          at: Date.now(),
        },
      ],
    };

    onAdd(newCard);
    setTitle("");
    setDescription("");
    setPriority(undefined);
    setSelectedLabels([]);
    setSelectedMembers([]);
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl w-[500px] p-6">
        <h2 className="text-lg font-bold mb-4">New Task</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Title */}
          <input
            className="w-full border rounded p-2"
            placeholder="Title..."
            value={title}
            onChange={(e) => setTitle(e.target.value)}
          />

          {/* Description */}
          <textarea
            className="w-full border rounded p-2"
            placeholder="Description..."
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />

          {/* Priority */}
          <div>
            <h3 className="font-semibold mb-1">Priority</h3>
            <div className="flex gap-2">
              {["High", "Medium", "Low"].map((p) => (
                <button
                  type="button"
                  key={p}
                  onClick={() => setPriority(p as "High" | "Medium" | "Low")}
                  className={`px-3 py-1 rounded text-sm text-white ${
                    priority === p
                      ? p === "High"
                        ? "bg-red-600"
                        : p === "Medium"
                        ? "bg-yellow-500"
                        : "bg-green-500"
                      : "bg-gray-400"
                  }`}
                >
                  {p}
                </button>
              ))}
            </div>
          </div>

          {/* Members */}
          <div>
            <h3 className="font-semibold mb-1">Members</h3>
            <div className="flex gap-2">
              {MEMBERS.map((m) => {
                const active = selectedMembers.some((sm) => sm.id === m.id);
                return (
                  <button
                    type="button"
                    key={m.id}
                    onClick={() => toggleMember(m)}
                    className={`px-2 py-1 rounded border ${
                      active ? "bg-blue-500 text-white" : "bg-gray-100"
                    }`}
                  >
                    {m.avatar} {m.name}
                  </button>
                );
              })}
            </div>
          </div>

          {/* Labels */}
          <div>
            <h3 className="font-semibold mb-1">Labels</h3>
            <div className="flex gap-2 flex-wrap">
              {LABEL_PRESETS.map((lbl) => {
                const active = selectedLabels.some((l) => l.id === lbl.id);
                return (
                  <button
                    type="button"
                    key={lbl.id}
                    onClick={() => toggleLabel(lbl)}
                    className={`px-3 py-1 rounded text-sm border`}
                    style={{
                      backgroundColor: active ? lbl.color : "#fff",
                      color: active ? "#fff" : lbl.color,
                      borderColor: lbl.color,
                    }}
                  >
                    {active ? "‚úì " : "+ "} {lbl.name}
                  </button>
                );
              })}
            </div>
          </div>

          {/* Buttons */}
          <div className="flex justify-between mt-4">
            <button
              type="button"
              onClick={onClose}
              className="bg-gray-300 px-3 py-1 rounded"
            >
              Close
            </button>
            <button
              type="submit"
              className="bg-green-500 text-white px-3 py-1 rounded"
            >
              Save
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
===============================================================================================
// === Core Types ===
export type Subtask = {
  id: string;
  title: string;
  done: boolean;
};

export type Label = {
  id: string;
  name: string;
  color: string;
};

export type Member = {
  id: string;
  name: string;
  avatar?: string; // could be URL or emoji
};

export type Attachment = {
  id: string;
  name: string;
  url: string;
};

export type Comment = {
  id: string;
  text: string;
  at: number;
};

export type Activity = {
  id: string;
  type:
    | "created"
    | "updated"
    | "opened"
    | "comment"
    | "label"
    | "member"
    | "dueDate"
    | "attachment"
    | "subtask"
    | "priority"
    | "moved";
  message: string;
  at: number;
};

export type Priority = "Low" | "Medium" | "High";

export type Card = {
  id: string;
  title: string;
  description: string;
  subtasks: Subtask[];
  dueDate?: string;
  labels: Label[];
  members: Member[];
  attachments: Attachment[];
  comments: Comment[];
  activity: Activity[];
  priority?: Priority;
};

export type Column = {
  id: string;
  title: string;
  cards: Card[];
};

export const LABEL_PRESETS: Label[] = [
  { id: "lbl-urgent", name: "Urgent", color: "#ef4444" }, // red-500
  { id: "lbl-bug", name: "Bug", color: "#f59e0b" }, // amber-500
  { id: "lbl-feat", name: "Feature", color: "#10b981" }, // green-500
  { id: "lbl-ui", name: "UI/UX", color: "#3b82f6" }, // blue-500
];

export const MEMBER_PRESETS: Member[] = [
  { id: "m1", name: "Ali", avatar: "üßë‚Äçüíª" },
  { id: "m2", name: "Sara", avatar: "üë©‚Äçüé®" },
  { id: "m3", name: "Omar", avatar: "üë®‚Äçüîß" },
];

export const PRIORITY_PRESETS: Priority[] = ["Low", "Medium", "High"];
=================================================================================