version: '3.8'

services:
  # SQL Server Database
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: todoos-mssql
    environment:
      - SA_PASSWORD=YourStrong!Password123
      - ACCEPT_EULA=Y
    ports:
      - "1433:1433"
    volumes:
      - mssql_data:/var/opt/mssql
    networks:
      - todoos-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P 'YourStrong!Password123' -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # PostgreSQL Database (Alternative)
  postgres:
    image: postgres:15
    container_name: todoos-postgres
    environment:
      - POSTGRES_DB=ToDoOS
      - POSTGRES_USER=todoos
      - POSTGRES_PASSWORD=YourStrong!Password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - todoos-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U todoos -d ToDoOS"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: todoos-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - todoos-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ToDoOS API Backend
  api:
    build:
      context: ./src/TaqTask.Api
      dockerfile: Dockerfile
    container_name: todoos-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ConnectionStrings__DefaultConnection=Server=mssql;Database=ToDoOS;User Id=sa;Password=YourStrong!Password123;TrustServerCertificate=True
      - JwtSettings__SecretKey=ToDoOS_Super_Secret_Key_2024_Change_In_Production
      - JwtSettings__Issuer=ToDoOS
      - JwtSettings__Audience=ToDoOS-Users
    ports:
      - "5000:8080"
    depends_on:
      mssql:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - ./src/TaqTask.Api:/app
      - /app/obj
    networks:
      - todoos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ToDoOS Frontend
  frontend:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: todoos-frontend
    ports:
      - "3000:80"
    depends_on:
      - api
    volumes:
      - ./web:/app
      - /app/node_modules
    networks:
      - todoos-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: todoos-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api
      - frontend
    networks:
      - todoos-network
    restart: unless-stopped

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: todoos-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - todoos-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: todoos-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - todoos-network

volumes:
  mssql_data:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  todoos-network:
    driver: bridge
